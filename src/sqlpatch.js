/* jshint node: true */

module.exports = sqlpatch;

var fs = require('fs');
var path = require('path');
var pkg = require('../package');
var toposort = require('toposort');
var extend = require('extend');

function sqlpatch(fileList, writer, options) {

    options = extend({
        dialect: 'postgres'
    }, options);


    var fileInfoList = fileList.map(readFileInfo);
    var fileInfoMap = fileInfoList.reduce(function(map, item) {
        var name;
        if ('name' in item.properties && item.properties.name.length >= 1) name = item.properties.name[0];
        else name = path.basename(item.file, '.sql');
        if (name in map) throw new Error("duplicate name '" + name + "'");
        map[name] = item;
        return map;
    }, {});

    var nameList = Object.keys(fileInfoMap);
    var nameEdgeList = nameList.reduce(function(list, name) {
        var fileInfoItem = fileInfoMap[name];
        if ('require' in fileInfoItem.properties) fileInfoItem.properties.require.forEach(function(dependencyName) {
            list.push([name, dependencyName]);
        });
        return list;
    }, []);

    var dependencyList = toposort.array(nameList, nameEdgeList);
    dependencyList.reverse();

    writeline(
        "-- generated by " + pkg.name + " " + pkg.version + ""
    );
    writeline();
    writeline();
    writeline();

    writeline(
        "CREATE TABLE IF NOT EXISTS ___patches(name varchar(100) PRIMARY KEY, created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);"
    );
    writeline();
    writeline();
    writeline();


    dependencyList.forEach(function(name, index) {
        var fileInfoItem = fileInfoMap[name];
        var number = index + 1;

        writeline("-- " + name + ": " + fileInfoItem.file);

        writeline(
            "DO $___patch_" + number + "$",
            "BEGIN"
        );
        writeline(
            "IF EXISTS (SELECT 1 FROM ___patches WHERE name = '" + name + "') THEN RETURN; END IF;"
        );

        if ('require' in fileInfoItem.properties) fileInfoItem.properties.require.forEach(function(dependencyName) {
            writeline(
                "IF NOT EXISTS (SELECT 1 FROM ___patches WHERE name = '" + dependencyName + "') THEN RAISE EXCEPTION 'missing dependency: " + dependencyName + "'; END IF;"
            );
        });

        writeline();
        writeline(fileInfoItem.content);
        writeline();

        writeline(
            "INSERT INTO ___patches (name) VALUES('" + name + "');"
        );
        writeline(
            "END",
            "$___patch_" + number + "$ LANGUAGE plpgsql;"
        );

        writeline();
        writeline();
        writeline();
    });

    function writeline() {
        writer.write(Array.prototype.slice.apply(arguments).join('\n') + '\n');
    }

}

function readFileInfo(file) {
    var content = fs.readFileSync(file).toString().replace(/(^\s+|\s+$|)/g, "");
    var properties = readProperties(content);
    return {
        file: file,
        content: content,
        properties: properties,
    };
}

function readProperties(content) {
    var result = {};
    var match;
    var re = /^\s*\-\-\s*@(.+?)\s+(.+?)\s*$/gm;
    while ((match = re.exec(content))) {
        if (match[1] in result) result[match[1]].push(match[2]);
        else result[match[1]] = [match[2]];
    }
    return result;
}