#!/usr/bin/env node
/* jshint node: true */

var pkg = require('./package');
var toposort = require('toposort');
var fs = require('fs');
var dependencyNodes = process.argv.slice(2);
var dependencyMap = dependencyNodes.reduce(function(map, node) {
    map[node] = readDependencyList(node);
    return map;
}, {});
var dependencyEdges = dependencyNodes.reduce(function(list, node) {
    dependencyMap[node].forEach(function(dependency) {
        list.push([node, dependency]);
    });
    return list;
}, []);

var dependencyList = toposort.array(dependencyNodes, dependencyEdges);
dependencyList.reverse();

writeline(
    "-- generated by " + pkg.name + " " + pkg.version + ""
);
writeline();
writeline();
writeline();

writeline(
    "CREATE TABLE IF NOT EXISTS ___patches(id varchar(500) PRIMARY KEY, created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);"
);
writeline();
writeline();
writeline();


dependencyList.forEach(function(src, index) {
    var dependencyList = dependencyMap[src];
    var content = fs.readFileSync(src).toString().replace(/(^\s+|\s+$|)/g, "");
    var number = index + 1;

    writeline("-- file " + src);

    writeline(
        "DO $___patch_" + number + "$",
        "BEGIN"
    );
    writeline(
        "IF EXISTS (SELECT 1 FROM ___patches WHERE id = '" + src + "') THEN RETURN; END IF;"
    );

    dependencyList.forEach(function(dependencySrc) {
        writeline(
            "IF NOT EXISTS (SELECT 1 FROM ___patches WHERE id = '" + dependencySrc + "') THEN RAISE EXCEPTION 'missing dependency " + dependencySrc + "'; END IF;"
        );
    });

    writeline();
    writeline(content);
    writeline();

    writeline(
        "INSERT INTO ___patches (id) VALUES('" + src + "');"
    );
    writeline(
        "END",
        "$___patch_" + number + "$ LANGUAGE plpgsql;"
    );

    writeline();
    writeline();
    writeline();
});

function writeline() {
    process.stdout.write(Array.prototype.slice.apply(arguments).join('\n') + '\n');
}

function readDependencyList(src) {
    var list = [];
    var content = fs.readFileSync(src);
    var match;
    var re = /^\s*\-\-\s*require\s+(.+)\s*$/gm;
    while ((match = re.exec(content))) {
        list.push(match[1]);
    }
    return list;
}